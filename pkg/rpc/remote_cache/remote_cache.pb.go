//
// Copyright 2023 Alibaba Cloud, Inc. or its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: pkg/rpc/remote_cache/remote_cache.proto

package remote_cache

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Code int32

const (
	Code_Success       Code = 0
	Code_Continue      Code = 1
	Code_AlreadyExists Code = 2
	Code_InProgress    Code = 3
)

// Enum value maps for Code.
var (
	Code_name = map[int32]string{
		0: "Success",
		1: "Continue",
		2: "AlreadyExists",
		3: "InProgress",
	}
	Code_value = map[string]int32{
		"Success":       0,
		"Continue":      1,
		"AlreadyExists": 2,
		"InProgress":    3,
	}
)

func (x Code) Enum() *Code {
	p := new(Code)
	*p = x
	return p
}

func (x Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Code) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_rpc_remote_cache_remote_cache_proto_enumTypes[0].Descriptor()
}

func (Code) Type() protoreflect.EnumType {
	return &file_pkg_rpc_remote_cache_remote_cache_proto_enumTypes[0]
}

func (x Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Code.Descriptor instead.
func (Code) EnumDescriptor() ([]byte, []int) {
	return file_pkg_rpc_remote_cache_remote_cache_proto_rawDescGZIP(), []int{0}
}

type CacheInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Len int64  `protobuf:"varint,3,opt,name=len,proto3" json:"len,omitempty"`
}

func (x *CacheInfo) Reset() {
	*x = CacheInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_remote_cache_remote_cache_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheInfo) ProtoMessage() {}

func (x *CacheInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_remote_cache_remote_cache_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheInfo.ProtoReflect.Descriptor instead.
func (*CacheInfo) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_remote_cache_remote_cache_proto_rawDescGZIP(), []int{0}
}

func (x *CacheInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CacheInfo) GetLen() int64 {
	if x != nil {
		return x.Len
	}
	return 0
}

type LoadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *LoadRequest) Reset() {
	*x = LoadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_remote_cache_remote_cache_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadRequest) ProtoMessage() {}

func (x *LoadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_remote_cache_remote_cache_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadRequest.ProtoReflect.Descriptor instead.
func (*LoadRequest) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_remote_cache_remote_cache_proto_rawDescGZIP(), []int{1}
}

func (x *LoadRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type LoadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*LoadResponse_Info
	//	*LoadResponse_Data
	Payload isLoadResponse_Payload `protobuf_oneof:"payload"`
}

func (x *LoadResponse) Reset() {
	*x = LoadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_remote_cache_remote_cache_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadResponse) ProtoMessage() {}

func (x *LoadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_remote_cache_remote_cache_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadResponse.ProtoReflect.Descriptor instead.
func (*LoadResponse) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_remote_cache_remote_cache_proto_rawDescGZIP(), []int{2}
}

func (m *LoadResponse) GetPayload() isLoadResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *LoadResponse) GetInfo() *CacheInfo {
	if x, ok := x.GetPayload().(*LoadResponse_Info); ok {
		return x.Info
	}
	return nil
}

func (x *LoadResponse) GetData() []byte {
	if x, ok := x.GetPayload().(*LoadResponse_Data); ok {
		return x.Data
	}
	return nil
}

type isLoadResponse_Payload interface {
	isLoadResponse_Payload()
}

type LoadResponse_Info struct {
	Info *CacheInfo `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type LoadResponse_Data struct {
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*LoadResponse_Info) isLoadResponse_Payload() {}

func (*LoadResponse_Data) isLoadResponse_Payload() {}

type CacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*CacheRequest_Info
	//	*CacheRequest_Data
	Payload isCacheRequest_Payload `protobuf_oneof:"payload"`
}

func (x *CacheRequest) Reset() {
	*x = CacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_remote_cache_remote_cache_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheRequest) ProtoMessage() {}

func (x *CacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_remote_cache_remote_cache_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheRequest.ProtoReflect.Descriptor instead.
func (*CacheRequest) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_remote_cache_remote_cache_proto_rawDescGZIP(), []int{3}
}

func (m *CacheRequest) GetPayload() isCacheRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *CacheRequest) GetInfo() *CacheInfo {
	if x, ok := x.GetPayload().(*CacheRequest_Info); ok {
		return x.Info
	}
	return nil
}

func (x *CacheRequest) GetData() []byte {
	if x, ok := x.GetPayload().(*CacheRequest_Data); ok {
		return x.Data
	}
	return nil
}

type isCacheRequest_Payload interface {
	isCacheRequest_Payload()
}

type CacheRequest_Info struct {
	Info *CacheInfo `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type CacheRequest_Data struct {
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*CacheRequest_Info) isCacheRequest_Payload() {}

func (*CacheRequest_Data) isCacheRequest_Payload() {}

type CacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    Code   `protobuf:"varint,1,opt,name=code,proto3,enum=remote_cache.Code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CacheResponse) Reset() {
	*x = CacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_remote_cache_remote_cache_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheResponse) ProtoMessage() {}

func (x *CacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_remote_cache_remote_cache_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheResponse.ProtoReflect.Descriptor instead.
func (*CacheResponse) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_remote_cache_remote_cache_proto_rawDescGZIP(), []int{4}
}

func (x *CacheResponse) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_Success
}

func (x *CacheResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *RemoveRequest) Reset() {
	*x = RemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_remote_cache_remote_cache_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRequest) ProtoMessage() {}

func (x *RemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_remote_cache_remote_cache_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRequest.ProtoReflect.Descriptor instead.
func (*RemoveRequest) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_remote_cache_remote_cache_proto_rawDescGZIP(), []int{5}
}

func (x *RemoveRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

var File_pkg_rpc_remote_cache_remote_cache_proto protoreflect.FileDescriptor

var file_pkg_rpc_remote_cache_remote_cache_proto_rawDesc = []byte{
	0x0a, 0x27, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2f, 0x0a, 0x09, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6c, 0x65, 0x6e, 0x22, 0x1f, 0x0a, 0x0b, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x5e, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x5e, 0x0a, 0x0c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x51, 0x0a, 0x0d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x21, 0x0a, 0x0d, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x2a, 0x44, 0x0a, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x10, 0x03, 0x32, 0xd3, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x19, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x44, 0x0a, 0x05, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x1a, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3d, 0x0a, 0x06, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x12, 0x1b, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x10, 0x5a, 0x0e, 0x2e, 0x3b, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_pkg_rpc_remote_cache_remote_cache_proto_rawDescOnce sync.Once
	file_pkg_rpc_remote_cache_remote_cache_proto_rawDescData = file_pkg_rpc_remote_cache_remote_cache_proto_rawDesc
)

func file_pkg_rpc_remote_cache_remote_cache_proto_rawDescGZIP() []byte {
	file_pkg_rpc_remote_cache_remote_cache_proto_rawDescOnce.Do(func() {
		file_pkg_rpc_remote_cache_remote_cache_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_rpc_remote_cache_remote_cache_proto_rawDescData)
	})
	return file_pkg_rpc_remote_cache_remote_cache_proto_rawDescData
}

var file_pkg_rpc_remote_cache_remote_cache_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pkg_rpc_remote_cache_remote_cache_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_pkg_rpc_remote_cache_remote_cache_proto_goTypes = []interface{}{
	(Code)(0),             // 0: remote_cache.Code
	(*CacheInfo)(nil),     // 1: remote_cache.CacheInfo
	(*LoadRequest)(nil),   // 2: remote_cache.LoadRequest
	(*LoadResponse)(nil),  // 3: remote_cache.LoadResponse
	(*CacheRequest)(nil),  // 4: remote_cache.CacheRequest
	(*CacheResponse)(nil), // 5: remote_cache.CacheResponse
	(*RemoveRequest)(nil), // 6: remote_cache.RemoveRequest
	(*emptypb.Empty)(nil), // 7: google.protobuf.Empty
}
var file_pkg_rpc_remote_cache_remote_cache_proto_depIdxs = []int32{
	1, // 0: remote_cache.LoadResponse.info:type_name -> remote_cache.CacheInfo
	1, // 1: remote_cache.CacheRequest.info:type_name -> remote_cache.CacheInfo
	0, // 2: remote_cache.CacheResponse.code:type_name -> remote_cache.Code
	2, // 3: remote_cache.RemoteCache.Load:input_type -> remote_cache.LoadRequest
	4, // 4: remote_cache.RemoteCache.Cache:input_type -> remote_cache.CacheRequest
	6, // 5: remote_cache.RemoteCache.Remove:input_type -> remote_cache.RemoveRequest
	3, // 6: remote_cache.RemoteCache.Load:output_type -> remote_cache.LoadResponse
	5, // 7: remote_cache.RemoteCache.Cache:output_type -> remote_cache.CacheResponse
	7, // 8: remote_cache.RemoteCache.Remove:output_type -> google.protobuf.Empty
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_pkg_rpc_remote_cache_remote_cache_proto_init() }
func file_pkg_rpc_remote_cache_remote_cache_proto_init() {
	if File_pkg_rpc_remote_cache_remote_cache_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_rpc_remote_cache_remote_cache_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_remote_cache_remote_cache_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_remote_cache_remote_cache_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_remote_cache_remote_cache_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_remote_cache_remote_cache_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_remote_cache_remote_cache_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_rpc_remote_cache_remote_cache_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*LoadResponse_Info)(nil),
		(*LoadResponse_Data)(nil),
	}
	file_pkg_rpc_remote_cache_remote_cache_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CacheRequest_Info)(nil),
		(*CacheRequest_Data)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_rpc_remote_cache_remote_cache_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_rpc_remote_cache_remote_cache_proto_goTypes,
		DependencyIndexes: file_pkg_rpc_remote_cache_remote_cache_proto_depIdxs,
		EnumInfos:         file_pkg_rpc_remote_cache_remote_cache_proto_enumTypes,
		MessageInfos:      file_pkg_rpc_remote_cache_remote_cache_proto_msgTypes,
	}.Build()
	File_pkg_rpc_remote_cache_remote_cache_proto = out.File
	file_pkg_rpc_remote_cache_remote_cache_proto_rawDesc = nil
	file_pkg_rpc_remote_cache_remote_cache_proto_goTypes = nil
	file_pkg_rpc_remote_cache_remote_cache_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RemoteCacheClient is the client API for RemoteCache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RemoteCacheClient interface {
	Load(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (RemoteCache_LoadClient, error)
	Cache(ctx context.Context, opts ...grpc.CallOption) (RemoteCache_CacheClient, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type remoteCacheClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteCacheClient(cc grpc.ClientConnInterface) RemoteCacheClient {
	return &remoteCacheClient{cc}
}

func (c *remoteCacheClient) Load(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (RemoteCache_LoadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RemoteCache_serviceDesc.Streams[0], "/remote_cache.RemoteCache/Load", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteCacheLoadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RemoteCache_LoadClient interface {
	Recv() (*LoadResponse, error)
	grpc.ClientStream
}

type remoteCacheLoadClient struct {
	grpc.ClientStream
}

func (x *remoteCacheLoadClient) Recv() (*LoadResponse, error) {
	m := new(LoadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *remoteCacheClient) Cache(ctx context.Context, opts ...grpc.CallOption) (RemoteCache_CacheClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RemoteCache_serviceDesc.Streams[1], "/remote_cache.RemoteCache/Cache", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteCacheCacheClient{stream}
	return x, nil
}

type RemoteCache_CacheClient interface {
	Send(*CacheRequest) error
	Recv() (*CacheResponse, error)
	grpc.ClientStream
}

type remoteCacheCacheClient struct {
	grpc.ClientStream
}

func (x *remoteCacheCacheClient) Send(m *CacheRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *remoteCacheCacheClient) Recv() (*CacheResponse, error) {
	m := new(CacheResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *remoteCacheClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/remote_cache.RemoteCache/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteCacheServer is the server API for RemoteCache service.
type RemoteCacheServer interface {
	Load(*LoadRequest, RemoteCache_LoadServer) error
	Cache(RemoteCache_CacheServer) error
	Remove(context.Context, *RemoveRequest) (*emptypb.Empty, error)
}

// UnimplementedRemoteCacheServer can be embedded to have forward compatible implementations.
type UnimplementedRemoteCacheServer struct {
}

func (*UnimplementedRemoteCacheServer) Load(*LoadRequest, RemoteCache_LoadServer) error {
	return status.Errorf(codes.Unimplemented, "method Load not implemented")
}
func (*UnimplementedRemoteCacheServer) Cache(RemoteCache_CacheServer) error {
	return status.Errorf(codes.Unimplemented, "method Cache not implemented")
}
func (*UnimplementedRemoteCacheServer) Remove(context.Context, *RemoveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}

func RegisterRemoteCacheServer(s *grpc.Server, srv RemoteCacheServer) {
	s.RegisterService(&_RemoteCache_serviceDesc, srv)
}

func _RemoteCache_Load_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LoadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RemoteCacheServer).Load(m, &remoteCacheLoadServer{stream})
}

type RemoteCache_LoadServer interface {
	Send(*LoadResponse) error
	grpc.ServerStream
}

type remoteCacheLoadServer struct {
	grpc.ServerStream
}

func (x *remoteCacheLoadServer) Send(m *LoadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RemoteCache_Cache_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemoteCacheServer).Cache(&remoteCacheCacheServer{stream})
}

type RemoteCache_CacheServer interface {
	Send(*CacheResponse) error
	Recv() (*CacheRequest, error)
	grpc.ServerStream
}

type remoteCacheCacheServer struct {
	grpc.ServerStream
}

func (x *remoteCacheCacheServer) Send(m *CacheResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *remoteCacheCacheServer) Recv() (*CacheRequest, error) {
	m := new(CacheRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RemoteCache_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteCacheServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_cache.RemoteCache/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteCacheServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RemoteCache_serviceDesc = grpc.ServiceDesc{
	ServiceName: "remote_cache.RemoteCache",
	HandlerType: (*RemoteCacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Remove",
			Handler:    _RemoteCache_Remove_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Load",
			Handler:       _RemoteCache_Load_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Cache",
			Handler:       _RemoteCache_Cache_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/rpc/remote_cache/remote_cache.proto",
}
